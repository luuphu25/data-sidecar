package icarus

import (
	"net/http"
	"net/url"
	"strings"
	"testing"
	"time"

	"github.com/luuphu25/data-sidecar/util"
)

var ()

func helper(kvs map[string]string, val float64) util.Metric {
	return util.Metric{Desc: kvs, Data: util.DataPoint{Val: val}}
}
func TestBase(t *testing.T) {
	i := NewIcarus("ft_")
	i.Record(helper(map[string]string{"a": "b", "__name__": "x", "G": ""}, 1))
	i.Record(helper(map[string]string{"a": "b", "__name__": "x", "G": ""}, 1))
	i.Record(helper(map[string]string{"a": "b", "__name__": "x", "G": ""}, 1))
	i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "exit", "G": "", "ft_model": "model1", "ft_metric": "metric1"}, 1))
	i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "exit", "G": "", "ft_model": "model2", "ft_metric": "metric1"}, 1))
	i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "exit", "G": "", "ft_model": "model3", "ft_metric": "metric1"}, 1))
	i.Record(helper(map[string]string{"ft_ploid": "b", "__name__": "exit", "G": "", "ft_model": "model3", "ft_metric": "metric1"}, 1))
	i.Record(helper(map[string]string{"ft_pod": "b", "ft_container": "b", "__name__": "exit", "G": "", "ft_model": "model3", "ft_metric": "metric1"}, 1))
	rw := util.NewHTTPResponseWriter()
	r := &http.Request{Form: url.Values{}}
	i.rollup()
	i.HandleFunc(rw, r)
	if g := rw.String(); !strings.Contains(g, "# These metrics generated by icarus.") {
		t.Error(g)
	}
}

func TestRollStore(t *testing.T) {
	i := NewIcarus("ft_")
	i.Ticker = time.NewTicker(time.Microsecond)
	i.Record(helper(map[string]string{"a": "b", "__name__": "x", "G": ""}, 1))
	time.Sleep(3)
	i.Ticker = time.NewTicker(100000)
	rw := util.NewHTTPResponseWriter()
	r := &http.Request{Form: url.Values{}}
	i.rollup()
	i.HandleFunc(rw, r)
	if g := rw.String(); !strings.Contains(g, "# These metrics generated by icarus.") {
		t.Error(g)
	}
}

func TestTableDenoising(t *testing.T) {
	i := NewIcarus("ft_")
	for ii := 0; ii < 100; ii++ {
		i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "exit", "G": "", "ft_model": "model1", "ft_metric": "metric1"}, 1))
		i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "anomaly", "G": "", "ft_model": "model2", "ft_metric": "metric1"}, 1))
		i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "anomaly", "G": "", "ft_model": "model3", "ft_metric": "metric1"}, 1))
		if ii%5 == 0 {
			i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "anomaly", "G": "", "ft_model": "model4", "ft_metric": "metric1"}, 1))
		} else if ii%5 == 1 {
			i.Record(helper(map[string]string{"ft_pod": "b", "__name__": "anomaly", "G": "", "ft_model": "model4", "ft_metric": "metric1"}, 1))
		}
		i.rollStoreBusiness()
	}
	rw := util.NewHTTPResponseWriter()
	r := &http.Request{Form: url.Values{}}
	i.rollup()
	i.HandleFunc(rw, r)
	if g := rw.String(); !strings.Contains(g, "# These metrics generated by icarus.") {
		t.Error(g)
	}
}
